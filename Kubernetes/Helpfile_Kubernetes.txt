Kubernetes basic modules
--------------------------
- Create a Kubernetes cluster
- Deploy an app
- Explore your app
- Expose your app publicly
- Scale up your application
- Update your application

Kubernetes coordinates a highly available cluster of computers that are connected to work as a single unit. 

The abstractions in Kubernetes allow you to deploy containerized applications to a cluster without tying them specifically to individual machines. 

Containerized applications are more flexible and available than in past deployment models, where applications were installed directly onto specific machines as packages deeply integrated into the host

Kubernetes automates the distribution and scheduling of application containers across a cluster in a more efficient way. 

Kubernetes consists of the following
-------------------------------------
- Master: To coordinate  the cluster
- Node: Workers that runs the application

Each node has a Kubelet, which is an agent for managing the node and communicating with the Kubernetes master.
The node should also have tools for handling container operations, such as Docker or rkt.

A Kubernetes cluster that handles production traffic should have a minimum of three nodes.

When you deploy appplications on Kubernets
--------------------------------------------
- you tell the master to start the application containers
- The Master schedules the containers to run on the cluster nodes
- The nodes communicate with the master using the Kubernetes API, which the master exposes
- End users can also use the Kubernetes API directly to interact with the cluster.

Minikube is a lightweight Kubernetes implementation that creates a VM on your local machine and deploys a simple cluster containing only one node

The Minikube CLI provides basic bootstrapping operations for working with your cluster, including start, stop, status, and delete. 

minikube version: Displays the minikube version
minikube start: Minikube started a virtual machine for you, and a Kubernetes cluster is now running in that VM.
kubectl version:
kubectl cluster-info:
kubectl get nodes: This command shows all nodes that can be used to host our applications

Using kubectl to Create a Deployment
-------------------------------------
Once you have a running Kubernetes cluster, you can deploy your containerized applications on top of it. 
To do so, you create a Kubernetes Deployment configuration.

The Deployment instructs Kubernetes how to create and update instances of your application
Once you've created a Deployment, the Kubernetes master schedules mentioned application instances onto individual Nodes in the cluster.
Once the application instances are created, a Kubernetes Deployment Controller continuously monitors those instances
If the Node hosting an instance goes down or is deleted, the Deployment controller replaces it. 

This provides a self-healing mechanism to address machine failure or maintenance.

Deploying your first app on Kubernetes
---------------------------------------
You can create and manage a Deployment by using the Kubernetes command line interface, Kubectl
Kubectl uses the Kubernetes API to interact with the cluster

When you create a Deployment, you'll need to specify the container image for your application and the number of replicas that you want to run.
For our first Deployment, we'll use a Node.js application packaged in a Docker container. 

The common format of a kubectl command is: kubectl action resource.
This performs the specified action (like create, describe) on the specified resource (like node, container).

kubectl get nodes : to view the modes in the cluster


The 'run' command creates a new deployment. 
We need to provide the deployment name and app image location (include the full repository url for images hosted outside Docker hub).
If we want to run the app on a specific port so we add the --port parameter

Example: kubectl run kubernetes-bootcamp --image=gcr.io/google-samples/kubernetes-bootcamp:v1 --port=8080

The above command performs the following commands
- searched for a suitable node where an instance of the application could be run
- scheduled the application to run on that Node
- configured the cluster to reschedule the instance on a new Node when needed

To list your deployments: kubectl get deployments. 

View our app
=============
Pods that are running inside Kubernetes are running on a private, isolated network. 
By default they are visible from other pods and services within the same kubernetes cluster, but not outside that network
When we use kubectl, we're interacting through an API endpoint to communicate with our application.

The kubectl command can create a proxy that will forward communications into the cluster-wide, private network. 
kubectl proxy: To forward communications into the cluster

We now have a connection between our host (the online terminal) and the Kubernetes cluster. 
The proxy enables direct access to the API from these terminals.

The API server will automatically create an endpoint for each pod, based on the pod name, that is also accessible through the proxy.
export POD_NAME=$(kubectl get pods -o go-template --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}')
echo Name of the Pod: $POD_NAME 

Now we can make an HTTP request to the application running in that pod:
curl http://localhost:8001/api/v1/namespaces/default/pods/$POD_NAME/proxy/

