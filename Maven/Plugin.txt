Maven build life cycle
-----------------------
- clean
- default
-  site

A fresh build of a project generating all packaged outputs and the documentation site and deploying it to a repository manager could be done with

mvn clean deploy site-deploy

Plugins
-------
There are two type of plugins 
- Build : Should be configured in the <build/> element of PON
- Reporting : Should be configured in the <reporting/> element of PON

Plugin Central Repository: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/

Some of the plugins
=====================
- clean : Clean up after the build
- compiler: compiles the java codeP
- deploy: deploy the artifacts in the remote repository
- install: Install the built artifact into the local repository.
- site: Generate a site for the current project.

Packaging tool
---------------
ear, ejb, jar, rar, war

To create a simple maven project
----------------------------------
mvn -B archetype:generate \
  -DarchetypeGroupId=org.apache.maven.archetypes \
  -DgroupId=com.mycompany.app \
  -DartifactId=my-app
  
mvn compile : To compile the application
mvn test: To compile the test source and run unit test
mvn test-compile: To simply compile the test source code


Build LifeCycle
----------------
Maven build life cycle is made up of phases. Ex, the default life cycle phase comprises of the following
->validate->compile->test->package->verify->install->deploy

Build Phase
-------------
Maven build-phase is made up of Plugin goals
A plugin goal represents a specific task (finer than a build phase) which contributes to the building and managing of a project
It may be bound to zero or more build phases. A goal not bound to any build phase could be executed outside of the build lifecycle by direct invocation

The order of execution depends on the order in which the goal(s) and the build phase(s) are invoked.
Ex. The clean and package arguments are build phases, while the dependency:copy-dependencies is a goal

mvn clean dependency:copy-dependencies package
